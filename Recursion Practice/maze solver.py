maze = '''███████████████████████████████████████████████████████████████████████
█*█                 █       █ █   █     █         █     █   █         █
█ █████ █████████ █ ███ ███ █ █ █ █ ███ █ █ █████ █ ███ █ █ █████ █ ███
█ █   █     █     █     █   █ █ █   █ █   █ █       █ █ █ █     █ █   █
█ █ █ █████ █ ███████████ ███ █ █████ █████ █████████ █ █ █████ ███ █ █
█   █     █ █ █     █   █   █   █         █       █   █   █   █   █ █ █
█████████ █ █ █ █████ █ ███ █ ███████████ ███████ █ █ █████ █████ ███ █
█       █ █ █ █     █ █     █ █   █   █   █     █ █ █   █         █   █
█ █ █████ █ █ ███ █ █ ███████ █ █ █ █ █ █ █ █████ ███ ███ █████████ █ █
█ █ █   █ █ █   █ █ █     █     █   █   █   █   █   █     █         █ █
███ █ █ █ █ ███ █ █ █████ ███████ ███████████ █ ███ █ █████ █████ ███ █
█   █ █   █ █   █ █     █   █     █       █   █     █ █     █     █   █
█ ███ ███████ █████ ███ ███ ███████ █████ █ █████████ ███ ███ █████ ███
█   █         █     █     █       █   █ █   █ █     █   █ █   █ █   █ █
███ ███████████ █ ███████ ███████ ███ █ █████ █ █ █████ █ █ ███ █ ███ █
█   █   █       █ █     █   █   █     █       █ █ █     █ █ █   █ █   █
█ ███ █ █ ███████ █ ███ █████ █ ███████ ███ ███ █ █ ███████ █ █ █ ███ █
█     █         █     █       █           █     █           █ █       █
███████████████████████████████████████████████████████████████████████'''.split('\n')

W = 71 ; H = 19

grid = {}
for y, row in enumerate(maze):
    for x, symbol in enumerate(row):
        grid[(x,y)] = symbol


def display():
    for y in range(H):
        for x in range(W):
            print(grid[(x,y)], end='')
        print()

def get_options(cell):
    x, y = cell
    maybes =  {(x+1, y), (x-1, y), (x, y+1), (x, y-1)} & grid.keys()
    return {cell for cell in maybes if grid[cell]==' '}


def solve(curr=(1,1)):
    options = get_options(curr)
    while options:
        curr = options.pop()
        grid[curr] = '*'
        if curr == (W-2, H-2):
            return True
        elif solve(curr):
            return True
    grid[curr] = ' '

solve()
display()